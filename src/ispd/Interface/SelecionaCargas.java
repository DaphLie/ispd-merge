/*
 * SelecionaCargas.java
 *
 * Created on 5 de Abril de 2010, 15:09
 */

package ispd.Interface;
import javax.swing.*;
import javax.swing.filechooser.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.*;
import java.io.*;
import java.awt.event.*;
import java.awt.image.*;  
import java.net.*;  
import javax.imageio.*;  


/**
 *
 * @author  aldoig
 */
public class SelecionaCargas extends JDialog {
    
    /** Creates new form SelecionaCargas */
    public SelecionaCargas(Boolean cargasConfiguradas,Integer cargasTipoConfiguracao, String cargasConfiguracao, String maquinas) {
        initComponents();

	this.maquinas = maquinas;
	this.cargasConfiguradas = cargasConfiguradas;
	this.cargasTipoConfiguracao = cargasTipoConfiguracao;
	this.cargasConfiguracao = cargasConfiguracao;
	this.tipoConfiguracaoAnterior = cargasTipoConfiguracao;

	if(cargasConfiguradas){
		switch(cargasTipoConfiguracao){
			case 0: setRandom(); break;
			case 1: setMachine(); break;
			case 2: setTraces(); break;
		}
	}else{
		setVisible(true);
	}

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jRadioButtonRandom = new javax.swing.JRadioButton();
        jRadioButtonMachine = new javax.swing.JRadioButton();
        jRadioButtonTraces = new javax.swing.JRadioButton();
		fc = new JFileChooser();

        setTitle("Select");
        setResizable(false);
        setLocationRelativeTo(null);
	setModal(true);
	Image imagem = Toolkit.getDefaultToolkit().getImage( getClass().getResource("imagens/Logo_GSPD_128.png"));
	setIconImage(imagem);

        jLabel1.setText("Please select the insertion mode for the workloads:");

        jRadioButtonRandom.setText("Random");
        jRadioButtonRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonRandomActionPerformed(evt);
            }
        });

        jRadioButtonMachine.setText("For each node");
        jRadioButtonMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonMachineActionPerformed(evt);
            }
        });

        jRadioButtonTraces.setText("Traces");
		jRadioButtonTraces.setEnabled(false);
        jRadioButtonTraces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonTracesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonTraces)
                    .addComponent(jRadioButtonMachine)
                    .addComponent(jRadioButtonRandom)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jRadioButtonRandom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonMachine)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonTraces)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void jRadioButtonRandomActionPerformed(java.awt.event.ActionEvent evt) {
		setRandom();
	}

	private void setRandom(){
		jRadioButtonMachine.setSelected(false);
		jRadioButtonTraces.setSelected(false);
		jRadioButtonRandom.setSelected(true);
		
		if(!cargasConfiguradas){
			String cargasConf = new String("");
			CargaRandomica carga = new CargaRandomica("");
			carga.setVisible(true);
			cargasConf = carga.getValores();
			
			int opcao = JOptionPane.showConfirmDialog(this,"Are you sure you want random workloads with the values listed below?\n"+cargasConf, "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
			switch(opcao){
				case JOptionPane.YES_OPTION:{
								cargasConfiguradas = true;
								tipoConfiguracaoAnterior = cargasTipoConfiguracao;
								cargasTipoConfiguracao = 0;
								cargasConfiguracao = cargasConf;
								this.setVisible(false);	
							}break;
				case JOptionPane.NO_OPTION:{
								cargasConfiguradas = false;
								tipoConfiguracaoAnterior = cargasTipoConfiguracao;
								cargasTipoConfiguracao = -1;
								cargasConfiguracao = null;
								jRadioButtonRandom.setSelected(false);
								setVisible(true);
							}break;
				case JOptionPane.CANCEL_OPTION:{
								cargasConfiguradas = false;
								tipoConfiguracaoAnterior = cargasTipoConfiguracao;
								cargasTipoConfiguracao = -1;
								cargasConfiguracao = null;
								jRadioButtonTraces.setSelected(false);
								this.setVisible(false);
							}break;
			}
		}else{
			int opcao = JOptionPane.showConfirmDialog(this,"Are you sure you want random workloads with the values listed below?\n"+cargasConfiguracao, "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
			switch(opcao){
				case JOptionPane.YES_OPTION:{
								cargasConfiguradas = true;
								tipoConfiguracaoAnterior = cargasTipoConfiguracao;
								cargasTipoConfiguracao = 0;
								cargasConfiguracao = cargasConfiguracao;
								this.setVisible(false);	
							}break;
				case JOptionPane.NO_OPTION:{
								cargasConfiguradas = false;
								tipoConfiguracaoAnterior = cargasTipoConfiguracao;
								cargasTipoConfiguracao = -1;
								cargasConfiguracao = null;
								jRadioButtonRandom.setSelected(false);
								setVisible(true);
							}break;
				case JOptionPane.CANCEL_OPTION:{
								cargasConfiguradas = false;
								tipoConfiguracaoAnterior = cargasTipoConfiguracao;
								cargasTipoConfiguracao = -1;
								cargasConfiguracao = null;
								jRadioButtonTraces.setSelected(false);
								this.setVisible(false);
							}break;
			}
		}
	}

	private void jRadioButtonMachineActionPerformed(java.awt.event.ActionEvent evt) {
		setMachine();
	}

	private void setMachine(){
		
		jRadioButtonMachine.setSelected(true);
		jRadioButtonTraces.setSelected(false);
		jRadioButtonRandom.setSelected(false);

		if(!cargasConfiguradas){
			String linha_maquinas[] = maquinas.split("\n");
			String configuracao = new String("");
			String[] colunas = new String[]{"Nome","Numero_Tarefas","Max_Comp_tarefa","Min_Comp_tarefa","Max_Comm_tarefa","Min_Comm_tarefa"};
			String[][] dados = new String[linha_maquinas.length][6];
			int tamanhoMaquinas = linha_maquinas.length;
			
			if(tipoConfiguracaoAnterior != 1){
				for(int i=0;i<tamanhoMaquinas;i++){
					dados[i][0]=linha_maquinas[i];
					dados[i][1]="0";
					dados[i][2]="0.0";
					dados[i][3]="0.0";
					dados[i][4]="0.0";
					dados[i][5]="0.0";
				}
			}else{
				String linha_carga[] = cargasConfiguracao.split("\n");
				int tamanhoCargas = linha_carga.length;
				for(int i=0;i<tamanhoMaquinas;i++){
					boolean achou = false;
					for(int j=0;j<tamanhoCargas;j++){
						String parte[] = linha_carga[j].split(" ");
						if(linha_maquinas[i].equals(parte[0])){
							achou=true;
							for(int k=0;k<6;k++){
								dados[i][k]=parte[k];
							}
							break;
						}
					}
					if(!achou){
						dados[i][0]=linha_maquinas[i];
						dados[i][1]="0";
						dados[i][2]="0.0";
						dados[i][3]="0.0";
						dados[i][4]="0.0";
						dados[i][5]="0.0";
					}
				}
			}
			
			DefaultTableModel modelo = new DefaultTableModel(dados, colunas);   
			JTable tabela = new JTable(modelo);  
			tabela.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); 
			CaixaTexto caixa = new CaixaTexto("Seleção de Cargas",tabela);
			caixa.setVisible(true);
			configuracao = caixa.getDadosTabela();
			int opcao = JOptionPane.showConfirmDialog(this,"Are you sure you want those workloads?\n"+configuracao, "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
				switch(opcao){
					case JOptionPane.YES_OPTION:{
									cargasConfiguradas = true;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = 1;
									cargasConfiguracao = configuracao;
									this.setVisible(false);	
								}break;
					case JOptionPane.NO_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = configuracao;
									jRadioButtonMachine.setSelected(false);
									setVisible(true);
								}break;
					case JOptionPane.CANCEL_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = configuracao;
									jRadioButtonMachine.setSelected(false);
									this.setVisible(false);
								}break;
				}				
		}else{
		int opcao = JOptionPane.showConfirmDialog(this,"Are you sure you want this trace:\n"+cargasConfiguracao+"?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
				switch(opcao){
					case JOptionPane.YES_OPTION:{
									cargasConfiguradas = true;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = 1;
									cargasConfiguracao = cargasConfiguracao;
									this.setVisible(false);	
								}break;
					case JOptionPane.NO_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = cargasConfiguracao;
									jRadioButtonMachine.setSelected(false);
									setVisible(true);
								}break;
					case JOptionPane.CANCEL_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = cargasConfiguracao;
									jRadioButtonMachine.setSelected(false);
									this.setVisible(false);
								}break;
				}
		}
		
	}

	private void jRadioButtonTracesActionPerformed(java.awt.event.ActionEvent evt) {
		setTraces();
	}

	private void setTraces(){
		jRadioButtonMachine.setSelected(false);
		jRadioButtonTraces.setSelected(true);
		jRadioButtonRandom.setSelected(false);
		
		/*if(!cargasConfiguradas){
			fc.addChoosableFileFilter(new ArquivoFilter());
			fc.setAcceptAllFileFilterUsed(false);
			//Add custom icons for file types.
			fc.setFileView(new ArquivoFileView());
			int returnVal = fc.showOpenDialog(SelecionaCargas.this);
			if (returnVal == JFileChooser.APPROVE_OPTION) {
				File file = fc.getSelectedFile();
				//This is where a real application would open the file.
				//Abrir arquivo.
				int opcao = JOptionPane.showConfirmDialog(this,"Are you sure you want this trace:\n"+file.getAbsolutePath()+"?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
				switch(opcao){
					case JOptionPane.YES_OPTION:{
									cargasConfiguradas = true;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = 2;
									cargasConfiguracao = file.getAbsolutePath();
									this.setVisible(false);	
								}break;
					case JOptionPane.NO_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = null;
									jRadioButtonMachine.setSelected(false);
									setVisible(true);
								}break;
					case JOptionPane.CANCEL_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = null;
									jRadioButtonMachine.setSelected(false);
									this.setVisible(false);
								}break;
				}				
			} else {
				//Cancelado
			}
		}else{
		int opcao = JOptionPane.showConfirmDialog(this,"Are you sure you want this trace:\n"+cargasConfiguracao+"?", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
				switch(opcao){
					case JOptionPane.YES_OPTION:{
									cargasConfiguradas = true;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = 2;
									cargasConfiguracao = cargasConfiguracao;
									this.setVisible(false);	
								}break;
					case JOptionPane.NO_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = null;
									jRadioButtonMachine.setSelected(false);
									setVisible(true);
								}break;
					case JOptionPane.CANCEL_OPTION:{
									cargasConfiguradas = false;
									tipoConfiguracaoAnterior = (cargasTipoConfiguracao == -1)? tipoConfiguracaoAnterior : cargasTipoConfiguracao;
									cargasTipoConfiguracao = -1;
									cargasConfiguracao = null;
									jRadioButtonMachine.setSelected(false);
									this.setVisible(false);
								}break;
				}
		}*/

	}

	public Boolean getCargasConfiguradas(){
		return cargasConfiguradas;
	}
	
	public Integer getCargasTipoConfiguracao(){
		return cargasTipoConfiguracao;
	}
	
	public String getCargasConfiguracao(){
		return cargasConfiguracao;
	}	

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButtonMachine;
    private javax.swing.JRadioButton jRadioButtonRandom;
    private javax.swing.JRadioButton jRadioButtonTraces;
    private Boolean cargasConfiguradas;
    private Integer cargasTipoConfiguracao;
    private String cargasConfiguracao;
	private String maquinas;
	private JFileChooser fc;
	private Integer tipoConfiguracaoAnterior;
    // End of variables declaration//GEN-END:variables
    
}
