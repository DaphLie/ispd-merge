
options {
  STATIC = false;
}

PARSER_BEGIN(CarregaArq)

package CarregaArqTexto;

import DescreveSistema.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.awt.*;
import java.util.*;
import java.io.*;
import java.awt.event.*;
import java.awt.image.*;  
import java.net.*;  
import javax.imageio.*;
import java.awt.*;
import java.util.HashSet;
import java.util.Vector;
import java.util.List;
import java.util.ArrayList;
import javax.swing.*;
import java.io.*;

class CarregaArq{

	public boolean verbose;
	private String textoVerbose = "Saida do Verbose:";
	public boolean erroEncontrado = false;
	private HashSet<DescreveIconePrivado> listaIcones = new HashSet<DescreveIconePrivado>();
	private int w=0,h=0;
	private HashSet<String> listaNomes = new HashSet<String>();
	private HashSet<String> listaEscravos = new HashSet<String>();
	private HashSet<String> listaConexoes = new HashSet<String>();
	private int numIcones = 0;
	private int numArestas = 0;
	private int numVertices = 0;
	private List<String> escravos2 = new ArrayList<String>();
	private String algoritmo = null;
	private String erros = "Foram encontrados os seguintes erros durante o parser:";
	private Boolean cargasConfiguradas = new Boolean(false);;
	private Integer cargasTipoConfiguracao = new Integer(-1);
	private String cargasConfiguracao = new String();
	
	public CarregaArq(){
	}

	public void printv(String msg){
		textoVerbose = textoVerbose+"\n>"+msg;
	}

	public void addErro(String msg){
		erros = erros+"\n"+msg;
	}

	public void resuladoParser(){
		if(token_source.encontrouErroLex()!= 0){
			erroEncontrado = true;
			addErro("Foram Encontrados "+String.valueOf(token_source.encontrouErroLex())+" erros léxicos."+token_source.getErros());
		}
		if(erroEncontrado){
			MostraSaida saida = new MostraSaida("Found Errors",erros);
			saida.setVisible(true);
		}else{
			//JOptionPane.showOptionDialog(null,"Modelo icônico reconhecido com sucesso.","Modelo icônico reconhecido", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,null,null, null);
			if(verbose){ MostraSaida saida = new MostraSaida("Saida do Reconhecimento",textoVerbose); saida.setVisible(true); }
		}
	}

	public int getW(){
		return this.w;
	}

	public void verificaLabels(){
		
		for(String temp:listaEscravos){
			if(!listaNomes.contains(temp)){
				erroEncontrado = true;
				addErro("\'"+temp+"\' does not exist!");
			}
		}

		for(String temp:listaConexoes){
			if(!listaNomes.contains(temp)){
				erroEncontrado = true;
				addErro("\'"+temp+"\' does not exist!");
			}
		}

	}


	public DescreveSistema getDescricao(){

		DescreveSistema descricao = new DescreveSistema();

		int lado = 0;
		int salto = 100;
		int inicio = (int) salto/2;

		lado = (int) Math.sqrt((double)numVertices)+2;
		this.w = lado * salto;
		this.h = lado * salto;

		int i=0;
		int j=0;
		for(DescreveIconePrivado icone:listaIcones){
			if(j>=lado){
				i++;
				j=0;
			}
			if(icone.getTipoIcone()!=2){
				icone.setX(inicio+(j*salto));
				icone.setY(inicio+(i*salto));
				j++;
			}
		}

		for(DescreveIconePrivado icone:listaIcones){
			if(icone.getTipoIcone()==2){
				String snoOrigem = icone.getSNoOrigem();
				String snoDestino = icone.getSNoDestino();
				for(DescreveIconePrivado icone2:listaIcones){
					if(snoOrigem.equals(icone2.getNome())){
						icone.setNoOrigem(icone2.getIdGlobal());
						icone.setX(icone2.getNumX());
						icone.setY(icone2.getNumY());
						for(DescreveIconePrivado icone3:listaIcones){
							if(snoDestino.equals(icone3.getNome())){
								icone3.addConexaoEntrada(icone2.getIdGlobal());
							}
						}
					}
					if(snoDestino.equals(icone2.getNome())){
						icone.setNoDestino(icone2.getIdGlobal());
						icone.setPreX(icone2.getNumX());
						icone.setPreY(icone2.getNumY());
						for(DescreveIconePrivado icone3:listaIcones){
							if(snoOrigem.equals(icone3.getNome())){
								icone3.addConexaoSaida(icone2.getIdGlobal());
							}
						}
					}
				}
			}
		}
		
		for(DescreveIconePrivado icone:listaIcones){
			if(icone.getTipoIcone()==1 && icone.getMestre()==true){
				List<String> escravos = icone.getEscravos();
				for(String temp:escravos){
					for(DescreveIconePrivado icone2:listaIcones){
						if(icone2.getNome().equals(temp)){
							icone.addEscravos2(icone2.getIdGlobal());
						}
					}
				}
			}
		}
		
		for(DescreveIconePrivado ico:listaIcones){
			List<Integer> escravos = ico.getEscravos2();
			HashSet<Integer> conexaoEntrada = ico.getConexaoEntrada();
			HashSet<Integer> conexaoSaida = ico.getConexaoSaida();
			descricao.addIconeLista(ico.getTipoIcone(), ico.getIdLocal(), ico.getIdGlobal(), ico.getNome(), ico.getNumX(), ico.getNumY(), ico.getNumPreX(), ico.getNumPreY(), ico.getPoderComputacional(), ico.getTaxaOcupacao(), ico.getLatencia(), ico.getBanda(), ico.getMestre(), ico.getAlgoritmo(), escravos, conexaoEntrada, conexaoSaida, ico.getNoOrigem(),ico.getNoDestino(), ico.getNumeroEscravos());
		}
		
		descricao.addIDs(numIcones,numVertices,numArestas);
		descricao.addListaNosLista(listaNomes);
		descricao.setCargas(cargasConfiguradas,cargasTipoConfiguracao,cargasConfiguracao);

		return descricao;
	}

	public void consomeTokens(){
		Token t = getToken(1);
		while( t.kind != MAQ && t.kind != REDE && t.kind != INET && t.kind != CLUSTER && t.kind != CARGA && t.kind != EOF){
			getNextToken();
			t = getToken(1);
		}
	}

	public void resetaObjetosParser(){
		textoVerbose = "";
		erroEncontrado = false;
		listaIcones.clear();
		w=0;
		h=0;
		numIcones = 0;
		numVertices = 0;
		numArestas = 0;
		listaNomes.clear();
		listaEscravos.clear();
		listaConexoes.clear();
		escravos2.clear();
		String algoritmo = null;
		String erros = "Foram encontrados os seguintes erros durante o parser:";
		cargasConfiguradas = new Boolean(false);;
		cargasTipoConfiguracao = new Integer(-1);
		cargasConfiguracao = new String();	
	}
	
	
	private class DescreveIconePrivado {

			private int tipoIcone;
			private int IdGlobal;
			private int IdLocal;
			private String nome;
			private int x,y,prex,prey;
			private double poderComputacional;
			private double taxaOcupacao;
			private double latencia;
			private double banda;
			private int numeroEscravos;
			private boolean mestre;
			private String algoritmoEscalonamento;
			private List<String> escravos;
			private List<Integer> escravos2;
			private int noOrigem;
			private int noDestino;
			private String snoOrigem;
			private String snoDestino;
			private HashSet<Integer> conexaoEntrada;
			private HashSet<Integer> conexaoSaida;
		
			public DescreveIconePrivado(){
				conexaoEntrada = new HashSet<Integer>();
				conexaoSaida = new HashSet<Integer>();
			}
			
			public void setAtributosNo(int tipoIcone,int IdLocal,int IdGlobal,String nome,double poderComputacional,double taxaOcupacao,boolean mestre,String algoritmoEscalonamento,List<String> escravos){
		
				escravos2 = new ArrayList<Integer>();
				this.tipoIcone = tipoIcone;
				this.IdLocal = IdLocal;
				this.IdGlobal = IdGlobal;
				this.nome = nome;
				this.x = 0;
				this.y = 0;
				this.prex = 0;
				this.prey = 0;
				this.poderComputacional = poderComputacional;
				this.taxaOcupacao = taxaOcupacao;
				this.latencia = 0.0;
				this.banda = 0.0;
				this.mestre = mestre;
				this.escravos = escravos;
				this.algoritmoEscalonamento = algoritmoEscalonamento;
				this.numeroEscravos = 0;
				this.noOrigem = 0;
				this.noDestino = 0;
				this.snoOrigem = null;
				this.snoDestino = null;
			}

			public void setAtributosLink(int tipoIcone,int IdLocal,int IdGlobal,String nome,double taxaOcupacao,double latencia,double banda,String snoOrigem, String snoDestino){
		
				escravos2 = new ArrayList<Integer>();
				this.tipoIcone = tipoIcone;
				this.IdLocal = IdLocal;
				this.IdGlobal = IdGlobal;
				this.nome = nome;
				this.x = 0;
				this.y = 0;
				this.prex = 0;
				this.prey = 0;
				this.poderComputacional = 0.0;
				this.taxaOcupacao = taxaOcupacao;
				this.latencia = latencia;
				this.banda = banda;
				this.mestre = false;
				this.escravos = new ArrayList<String>();
				this.algoritmoEscalonamento = null;
				this.numeroEscravos = 0;
				this.noOrigem = 0;
				this.noDestino = 0;
				this.snoOrigem = snoOrigem;
				this.snoDestino = snoDestino;
			
			}

			public void setAtributosCluster(int tipoIcone,int IdLocal,int IdGlobal,String nome,double poderComputacional,double latencia,double banda, String algoritmoEscalonamento, int numeroEscravos){
		
				escravos2 = new ArrayList<Integer>();
				this.tipoIcone = tipoIcone;
				this.IdLocal = IdLocal;
				this.IdGlobal = IdGlobal;
				this.nome = nome;
				this.x = 0;
				this.y = 0;
				this.prex = 0;
				this.prey = 0;
				this.poderComputacional = poderComputacional;
				this.taxaOcupacao = 0.0;
				this.latencia = latencia;
				this.banda = banda;
				this.mestre = false;
				this.escravos = new ArrayList<String>();
				this.algoritmoEscalonamento = algoritmoEscalonamento;
				this.numeroEscravos = numeroEscravos;
				this.noOrigem = 0;
				this.noDestino = 0;
				this.snoOrigem = null;
				this.snoDestino = null;
			
			}

			public void setAtributosInet(int tipoIcone,int IdLocal,int IdGlobal,String nome,double taxaOcupacao,double latencia,double banda){
		
				escravos2 = new ArrayList<Integer>();
				this.tipoIcone = tipoIcone;
				this.IdLocal = IdLocal;
				this.IdGlobal = IdGlobal;
				this.nome = nome;
				this.x = 0;
				this.y = 0;
				this.prex = 0;
				this.prey = 0;
				this.poderComputacional = 0.0;
				this.taxaOcupacao = taxaOcupacao;
				this.latencia = latencia;
				this.banda = banda;
				this.mestre = false;
				this.escravos = new ArrayList<String>();
				this.algoritmoEscalonamento = null;
				this.numeroEscravos = 0;
				this.noOrigem = 0;
				this.noDestino = 0;
				this.snoOrigem = null;
				this.snoDestino = null;
			
			
			}
	
			public void addConexaoEntrada(int num){conexaoEntrada.add(num);}
			public void addConexaoSaida(int num){conexaoSaida.add(num);}
			public void addEscravos2(int id){escravos2.add(id);}
			public int getTipoIcone(){return  tipoIcone;}
			public int getIdGlobal(){return  IdGlobal;}
			public int getIdLocal(){return  IdLocal;}
			public String getNome(){return  nome;}
			public int getNumX(){return  x;}
			public int getNumY(){return  y;}
			public void setX(int x){this.x = x;}
			public void setY(int y){this.y = y;}
			public int getNumPreX(){return  prex;}
			public int getNumPreY(){return  prey;}
			public void setPreX(int x){this.prex = x;}
			public void setPreY(int y){this.prey = y;}
			public double getPoderComputacional(){return  poderComputacional;}
			public double getTaxaOcupacao(){return  taxaOcupacao;}
			public double getLatencia(){return  latencia;}
			public double getBanda(){return  banda;}
			public boolean getMestre(){return  mestre;}
			public List<String> getEscravos(){return  escravos;}
			public List<Integer> getEscravos2(){return  escravos2;}
			public String getAlgoritmo(){return  algoritmoEscalonamento;}
			public int getNumeroEscravos(){return numeroEscravos;}
			public void setNoOrigem(int no){this.noOrigem = no;}
			public void setNoDestino(int no){this.noDestino = no;}
			public int getNoOrigem(){return noOrigem;}
			public int getNoDestino(){return noDestino;}
			public String getSNoOrigem(){return snoOrigem;}
			public String getSNoDestino(){return snoDestino;}
			public HashSet<Integer> getConexaoEntrada(){return conexaoEntrada;}
			public HashSet<Integer> getConexaoSaida(){return conexaoSaida;}
	
	
	}	
	
	
	
}
PARSER_END(CarregaArq)


TOKEN_MGR_DECLS:
{
private int contaErrosLex = 0;
private String erros = new String("");


public int encontrouErroLex()
{
	return contaErrosLex;
}

public void addErro(String msg)
{
	erros = erros+"\n"+msg;
}

public String getErros()
{
	return erros;
}

}



TOKEN:	{ 
	<RR: "RoundRobin"> |
	<MAQ: "MAQ"> |
	<VAZIO: "---"> |
	<LMAQ: "LMAQ"> |
	<REDE: "REDE"> |
	<INET: "INET"> |
	<FPLTF:	"FPLTF"> |
	<CARGA: "CARGA"> |
	<TRACE: "TRACE"> |
	<MESTRE: "MESTRE"> |
	<RANDOM: "RANDOM"> |
	<POISSON: "POISSON"> |
	<ESCRAVO: "ESCRAVO"> |
	<CLUSTER: "CLUSTER"> |
	<CONECTA: "CONECTA"> |
	<MAQUINA: "MAQUINA"> |
	<TWOSTAGE: "TWOSTAGE"> |
	<WORKQUEUE: "WORKQUEUE"> |
	<EXPONENCIAL: "EXPONENCIAL">
	} 
//strings mais curtas antes para melhorar o desempenho do lexer

TOKEN:	{< especial: ( "!" | "@" | "#" | "$" | "%" | "&" | "(" | ")" | "-" | "_" | "+" | "=" | "{" | "}" | "[" | "]" | "~" | "^" | ";" | "." | "," | "|" | ":" | "\\" | "/" ) >}

TOKEN:	{< identificador: (["A"-"Z","a"-"z"])+((<especial>) | (["0"-"9"]) | (["A"-"Z","a"-"z"]))* >}

TOKEN:	{< inteiro: (["0"-"9"])+ >}

TOKEN:	{< flutuante: (["0"-"9"])+"."(["0"-"9"])+ >}

SKIP: { "\n" | " " | "\t" | "\b" | < "#" (~["\r","\n"])* ("\n" | "\r" | "\r\n") > }

SPECIAL_TOKEN:
{
<invalido: (~["A"-"Z","a"-"z","0"-"9","!" , "@" , "#" , "$" , "%" , "&" , "(" , ")" , "-" , "_" , "+" , "=" , "{" , "}" , "[" , "]" , "~" , "^" , ";" , "." , "," , "|" , ":" , "\\" , "/", "\n" , " " , "\t" , "\b" , "#" , "\f" , "\r" ])+>
	{
		addErro("Erro na linha "+input_stream.getEndLine()+". Caracter "+image+" nÃ£o Ã© aceito.");
		contaErrosLex++;
	}
}

void Modelo():
{
	resetaObjetosParser();
}
{
	try{
		Icones() <EOF> 
		{
			printv("Reconheceu Modelo()");
	
			verificaLabels();	
	
			resuladoParser();
		}
	}
	catch(ParseException e){
		Token t = getToken(1);
		addErro("Erro semantico encontrado na linha "+t.endLine+", coluna "+t.endColumn);
		erroEncontrado = true;
		consomeTokens();
		resuladoParser();
	}
}

void Icones():
{

}
{
	 (Icone())+ 
		{ printv("Reconheceu Icones"); }
}

void Icone():
{

}
{
	No()	
		{ printv("Reconheceu No()"); }
	| Cluster() 
		{ printv("Reconheceu Cluster()"); }
	| Link()
		{ printv("Reconheceu Link()"); }
	| Inet()
		{ printv("Reconheceu Inet()"); }
	| Carga()
		{ printv("Reconheceu Carga()"); }
}

boolean NoTipo():
{
	Token t;
}
{
	<MESTRE> algoritmo=ClusterAlg() <LMAQ> NoLista() { return true; }
	| <ESCRAVO> { return false; }
}

void NoLista():
{
	Token t;
	String s;
	escravos2.clear();
}
{
	(t=<identificador>{s = t.image; escravos2.add(s); listaEscravos.add(s); printv("Reconheceu nome no escravo");} )+
}

void No():
{
	Boolean mestre;
	Token t2, t3, t4;
	DescreveIconePrivado icone = new DescreveIconePrivado();
	List<String> escravos = new ArrayList<String>();
	String nome;
}
{
	try{
		<MAQ> t2=<identificador> t3=<flutuante> t4=<flutuante> mestre=NoTipo() 
		{
			if(listaNomes.contains(t2.image)){
				addErro("There's already an icon named \'"+t2.image+"\'.");
				erroEncontrado = true;
			}else{
				listaNomes.add(t2.image);
			}
		
			if(mestre){icone.setAtributosNo(1, numVertices, numIcones, t2.image, Double.parseDouble(t3.image), Double.parseDouble(t4.image), true, algoritmo, escravos2);
					listaIcones.add(icone); 
					numIcones++;
					numVertices++;
					algoritmo = null;
				}
			else{icone.setAtributosNo(1, numVertices, numIcones, t2.image, Double.parseDouble(t3.image), Double.parseDouble(t4.image), false, algoritmo, escravos);
					listaIcones.add(icone); 
					numIcones++;
					numVertices++;
				}
		}
	}
	catch(ParseException e){
		Token t = getToken(1);
		addErro("Erro semantico encontrado na linha "+t.endLine+", coluna "+t.endColumn);
		erroEncontrado = true;
		consomeTokens();
	}

}

void Link():
{
	Token t2, t3, t4, t5, t6, t7;
	DescreveIconePrivado icone = new DescreveIconePrivado();
}
{
	try{
		<REDE> t2=<identificador> t3=<flutuante> t4=<flutuante> t5=<flutuante> <CONECTA> t6=<identificador> t7=<identificador>
		{
			if(listaNomes.contains(t2.image)){
				addErro("There's already an icon named \'"+t2.image+"\'.");
				erroEncontrado = true;
			}else{
				listaNomes.add(t2.image);
			}
			
			if(!listaConexoes.contains(t6.image)){ listaConexoes.add(t6.image); }
			if(!listaConexoes.contains(t7.image)){ listaConexoes.add(t7.image); }
			icone.setAtributosLink(2, numArestas, numIcones , t2.image, Double.parseDouble(t5.image), Double.parseDouble(t4.image), Double.parseDouble(t3.image), t6.image, t7.image);
			listaIcones.add(icone);
			numArestas++;
			numIcones++;	
		}
	}
	catch(ParseException e){
		Token t = getToken(1);
		addErro("Erro semantico encontrado na linha "+t.endLine+", coluna "+t.endColumn);
		erroEncontrado = true;
		consomeTokens();
	}
}

String ClusterAlg():
{
	Token t;
	String s;
}
{
	t=<RR> { s = t.image; return s;}
	| t=<WORKQUEUE> { s = t.image; return s;}
	| t=<FPLTF> { s = t.image; return s;}
	| t=<VAZIO> { s = t.image; return s;}
}

void Cluster():
{
	String s;
	Token t2, t3, t4, t5, t6, t7;
	DescreveIconePrivado icone = new DescreveIconePrivado();
}
{
	try{
		<CLUSTER> t2=<identificador> t3=<inteiro> t4=<flutuante> t5=<flutuante> t6=<flutuante> s=ClusterAlg()
		{
			if(listaNomes.contains(t2.image)){
				addErro("There's already an icon named \'"+t2.image+"\'.");
				erroEncontrado = true;
			}else{
				listaNomes.add(t2.image);
			}
			icone.setAtributosCluster(3, numVertices, numIcones, t2.image, Double.parseDouble(t4.image), Double.parseDouble(t6.image), Double.parseDouble(t5.image), s,  Integer.parseInt(t3.image));
			listaIcones.add(icone);
			numIcones++;
			numVertices++;
		}
	}
	catch(ParseException e){
		Token t = getToken(1);
		addErro("Erro semantico encontrado na linha "+t.endLine+", coluna "+t.endColumn);
		erroEncontrado = true;
		consomeTokens();
	}
}

void Inet():
{
	Token t2, t3, t4, t5, t6, t7;
	DescreveIconePrivado icone = new DescreveIconePrivado();
	//escravos.clear();
	HashSet<String> nosConectados = new HashSet<String>();
	List<String> escravos = new ArrayList<String>();
}
{
	try{
		<INET> t2=<identificador> t3=<flutuante> t4=<flutuante> t5=<flutuante>
		{	
			if(listaNomes.contains(t2.image)){
				addErro("There's already an icon named \'"+t2.image+"\'.");
				erroEncontrado = true;
			}else{
				listaNomes.add(t2.image);
			}
			icone.setAtributosInet(4, numVertices,numIcones, t2.image, Double.parseDouble(t5.image), Double.parseDouble(t4.image), Double.parseDouble(t3.image));
			listaIcones.add(icone);
			numIcones++;
			numVertices++;
		}
	}
	catch(ParseException e){
		Token t = getToken(1);
		addErro("Erro semantico encontrado na linha "+t.endLine+", coluna "+t.endColumn);
		erroEncontrado = true;
		consomeTokens();
	}
}

void Carga():
{
	cargasConfiguradas = true;
}
{
	try{
		<CARGA> TipoCarga()
	}
	catch(ParseException e){
		Token t = getToken(1);
		addErro("Erro semantico encontrado na linha "+t.endLine+", coluna "+t.endColumn);
		erroEncontrado = true;
		consomeTokens();
	}
}

void TipoCarga():
{
}
{
		<RANDOM> TipoRandom()
	|	<MAQUINA> (TipoMaquina())+
	|	<TRACE> TipoTrace()
}

void TipoRandom():
{
	String dist;
	Token t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11;
	cargasTipoConfiguracao = 0;
}
{
	t1=<inteiro> t2=<inteiro> t3=<inteiro> t4=<flutuante> t5=<inteiro> t6=<inteiro> t7=<inteiro> t8=<flutuante> t9=<inteiro> t10=<inteiro> t11=<inteiro> 
	{
		cargasConfiguracao = t1.image+" "+t2.image+" "+t3.image+" "+t4.image+"\n"+t5.image+" "+t6.image+" "+t7.image+" "+t8.image+"\n"+t9.image+" "+t10.image+" "+t11.image;
	}
}

String Distribuicao():
{
	Token t;
}
{
		t=<POISSON> {return t.image;} 
	|	t=<EXPONENCIAL> {return t.image;}
	|	t=<TWOSTAGE> {return t.image;}
}

void TipoMaquina():
{
	String dist;
	Token t1,t2,t3,t4,t5,t6;
	cargasTipoConfiguracao = 1;
}
{
	t1=<identificador> t2=<inteiro> t3=<flutuante> t4=<flutuante> t5=<flutuante> t6=<flutuante>
	{
		cargasConfiguracao += t1.image+" "+t2.image+" "+t3.image+" "+t4.image+" "+t5.image+" "+t6.image+"\n";
	}
}

void TipoTrace():
{
	Token t;
	cargasTipoConfiguracao = 2;
}
{
	t=<identificador>
	{
		cargasConfiguracao = t.image+"\n";
	}
}
